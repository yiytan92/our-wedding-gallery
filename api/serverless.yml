service: our-wedding-gallery-api
frameworkVersion: "^3.35.2"

provider:
  name: aws
  region: ${opt:region}
  stage: ${opt:stage}
  runtime: nodejs18.x
  memorySize: 256
  timeout: 28
  tags: ${self:custom.tags}
  stackTags: ${self:custom.tags}
  httpApi:
    cors: true
  iam: ${file(./serverless.${opt:stage}.yml):iam, null}

plugins: ${file(./serverless.${opt:stage}.yml):plugins, null}

custom: ${file(./serverless.${opt:stage}.yml):custom, null}

package:
  individually: true

functions:
  bootstrap:
    handler: handler/bootstrap.handler
    environment:
      HOST: ${self:custom.host}
      MAX_PHOTOS_PER_REQUEST: ${self:custom.maxPhotosPerRequest}
    events:
      - httpApi:
          path: /api
          method: get

  list-photos:
    handler: handler/list-photos.handler
    environment:
      PHOTO_TABLE_NAME: ${self:custom.photoTableName}
      PHOTO_BUCKET_PUBLIC_READ_URL: ${self:custom.photoBucketPublicReadUrl}
      DYNAMODB_ENDPOINT: ${self:custom.dynamoDBEndpoint, null}
      HOST: ${self:custom.host}
      PHOTOS_PER_BATCH: 6
    events:
      - httpApi:
          path: /api/list
          method: get

  request-photo-upload:
    handler: handler/request-photo-upload.handler
    environment:
      UPLOAD_BUCKET_NAME: ${self:custom.uploadBucketName}
      S3_ENDPOINT: ${self:custom.s3Endpoint, null}
      HOST: ${self:custom.host}
      MAX_PHOTOS_PER_REQUEST: ${self:custom.maxPhotosPerRequest}
    events:
      - httpApi:
          path: /api/request
          method: post

  delete-photos:
    handler: handler/delete-photos.handler
    environment:
      PHOTO_TABLE_NAME: ${self:custom.photoTableName}
      DYNAMODB_ENDPOINT: ${self:custom.dynamoDBEndpoint, null}
    events:
      - httpApi:
          path: /api/delete
          method: post

  process-photo:
    handler: handler/process-photo.handler
    memorySize: 3008
    timeout: 120
    environment:
      UPLOAD_BUCKET_NAME: ${self:custom.uploadBucketName}
      PHOTO_BUCKET_NAME: ${self:custom.photoBucketName}
      PHOTO_BUCKET_PREFIX: ${self:custom.photoBucketPrefix}
      PHOTO_TABLE_NAME: ${self:custom.photoTableName}
      DYNAMODB_ENDPOINT: ${self:custom.dynamoDBEndpoint, null}
      S3_ENDPOINT: ${self:custom.s3Endpoint, null}
    events:
      - s3:
          bucket: ${self:custom.uploadBucketName}
          event: s3:ObjectCreated:*
          existing: true

resources: ${file(./serverless.${opt:stage}.yml):resources, null}
